import React, { useState } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';
import { Vulnerability } from '../../types';
import { AlertTriangle, Shield, TrendingDown, ChevronRight } from 'lucide-react';
import { useNavigate } from 'react-router-dom';

interface VulnerabilityChartProps {
  vulnerabilities: Vulnerability[];
  onViewReports?: () => void;
}

export const VulnerabilityChart: React.FC<VulnerabilityChartProps> = ({ vulnerabilities, onViewReports }) => {
  // Process data for severity distribution
  const severityData = vulnerabilities.reduce((acc, vuln) => {
    acc[vuln.severity] = (acc[vuln.severity] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  const pieData = [
    { name: 'Critical', value: severityData.critical || 0, color: '#DC2626' },
    { name: 'High', value: severityData.high || 0, color: '#EA580C' },
    { name: 'Medium', value: severityData.medium || 0, color: '#D97706' },
    { name: 'Low', value: severityData.low || 0, color: '#65A30D' }
  ];

  // Process data for vulnerability types
  const typeData = vulnerabilities.reduce((acc, vuln) => {
    const typeName = vuln.type.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
    acc[typeName] = (acc[typeName] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  const barData = Object.entries(typeData).map(([name, count]) => ({
    name: name.length > 15 ? name.substring(0, 15) + '...' : name,
    count
  }));

  const handleViewReports = () => {
    if (onViewReports) {
      onViewReports();
    }
  };

  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
      <div className="flex items-center justify-between mb-6">
        <div>
          <h3 className="text-lg font-semibold text-gray-900 flex items-center">
            <AlertTriangle className="w-5 h-5 text-red-600 mr-2" />
            Vulnerability Analysis
          </h3>
          <p className="text-sm text-gray-600">Distribution and trends across your environments</p>
        </div>
        <div className="flex items-center space-x-2 text-sm text-green-600">
          <TrendingDown className="w-4 h-4" />
          <span>-12% this week</span>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Severity Distribution */}
        <div>
          <h4 className="text-sm font-medium text-gray-700 mb-3">Severity Distribution</h4>
          <ResponsiveContainer width="100%" height={200}>
            <PieChart>
              <Pie
                data={pieData}
                cx="50%"
                cy="50%"
                innerRadius={40}
                outerRadius={80}
                paddingAngle={5}
                dataKey="value"
              >
                {pieData.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={entry.color} />
                ))}
              </Pie>
              <Tooltip />
            </PieChart>
          </ResponsiveContainer>
          <div className="flex flex-wrap gap-2 mt-2">
            {pieData.map((item, index) => (
              <div key={index} className="flex items-center text-xs">
                <div 
                  className="w-3 h-3 rounded-full mr-1" 
                  style={{ backgroundColor: item.color }}
                ></div>
                <span>{item.name}: {item.value}</span>
              </div>
            ))}
          </div>
        </div>

        {/* Vulnerability Types */}
        <div>
          <h4 className="text-sm font-medium text-gray-700 mb-3">Vulnerability Types</h4>
          <ResponsiveContainer width="100%" height={200}>
            <BarChart data={barData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis 
                dataKey="name" 
                tick={{ fontSize: 10 }}
                angle={-45}
                textAnchor="end"
                height={60}
              />
              <YAxis />
              <Tooltip />
              <Bar dataKey="count" fill="#3B82F6" radius={[4, 4, 0, 0]} />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* Recent Critical Vulnerabilities */}
      <div className="mt-6 pt-6 border-t border-gray-200">
        <div className="flex items-center justify-between mb-3">
          <h4 className="text-sm font-medium text-gray-700 flex items-center">
            <Shield className="w-4 h-4 text-red-600 mr-2" />
            Recent Critical Issues
          </h4>
          <button 
            className="text-sm text-blue-600 hover:text-blue-700 flex items-center"
            onClick={handleViewReports}
          >
            View All Reports
            <ChevronRight className="w-4 h-4 ml-1" />
          </button>
        </div>
        <div className="space-y-2">
          {vulnerabilities
            .filter(v => v.severity === 'critical')
            .slice(0, 3)
            .map((vuln) => (
              <div 
                key={vuln.id} 
                className="flex items-center justify-between p-3 bg-red-50 rounded-lg hover:bg-red-100 transition-colors cursor-pointer"
                onClick={handleViewReports}
              >
                <div>
                  <p className="text-sm font-medium text-gray-900">{vuln.title}</p>
                  <p className="text-xs text-gray-600">{vuln.location}</p>
                </div>
                <div className="text-right">
                  <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
                    CVSS {vuln.cvssScore}
                  </span>
                </div>
              </div>
            ))}
          {vulnerabilities.filter(v => v.severity === 'critical').length === 0 && (
            <div className="p-4 bg-gray-50 rounded-lg text-center">
              <p className="text-sm text-gray-600">No critical vulnerabilities found</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};